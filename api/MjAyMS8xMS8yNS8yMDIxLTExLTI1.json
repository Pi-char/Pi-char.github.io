{"title":"Vue 3 + Vite + Testing Library","date":"2021-11-25T03:35:41.000Z","date_formatted":{"ll":"2021年11月25日","L":"2021/11/25","MM-DD":"11-25"},"link":"2021/11/25/2021-11-25","tags":["Vue.js"],"updated":"2024-01-24T01:26:39.000Z","content":"<h2 id=\"关于组件测试\">关于组件测试<a title=\"#关于组件测试\" href=\"#关于组件测试\"></a></h2>\n<p>Vue 有官方的组件测试库<a href=\"https://vue-test-utils.vuejs.org/\" target=\"_blank\">Vue Test Utils</a>,这是一个比较偏底层的组件测试库,<br>\n如果对其不熟悉的话,官方建议是使用<a href=\"https://testing-library.com/docs/vue-testing-library/intro\" target=\"_blank\">Vue Testing Library</a>,<br>\n它是对 Vue Test Utils 的抽象</p>\n<h2 id=\"项目添加组件测试\">项目添加组件测试<a title=\"#项目添加组件测试\" href=\"#项目添加组件测试\"></a></h2>\n<ol>\n<li>使用 vite 创建 Vue 应用</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn create vite &lt;project_name&gt; --template vue</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装依赖</li>\n</ol>\n<p>testing library 目前只针对 Vue2 进行了适配,如果需要在 Vue3 中使用,需要安装 6.x.x 版本</p>\n<p>在使用 testing library 处理组件,它会返回一些选择器,让你根据不同的方式获取组件中的 DOM 元素,<br>\n所以在用 testing library 测试的时候,可能会需要确认某个 DOM 是否被正确的渲染出来,但 jest 本身<br>\n并没有提供这些断言的方法,所以才需要<a href=\"https://github.com/testing-library/jest-dom#readme\" target=\"_blank\">jest-dom</a>来扩充对 DOM 的断言方式</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add jest @testing-library/vue@next babel-jest @babel/core @babel/preset-env -D</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>babel 配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">targets</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">node</span>: <span class=\"string\">&#x27;current&#x27;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>jest 配置</li>\n</ol>\n<p>transform 配置中添加了针对不同文件的转换规则,如果需要测试的文件<br>\n不是 Vue3 和 js 则需要安装对应的插件并修改 transform 配置,例如如果使用<br>\nVue2 的话可以安装@vue/vue2-jest,使用 ts 话则可以安装 ts-jest</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">testEnvironment</span>: <span class=\"string\">&#x27;jsdom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">transform</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;^.+\\\\.vue$&#x27;</span>: <span class=\"string\">&#x27;@vue/vue3-jest&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;^.+\\\\js$&#x27;</span>: <span class=\"string\">&#x27;babel-jest&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">testRegex</span>: <span class=\"string\">&#x27;(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.js$&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">moduleFileExtensions</span>: [<span class=\"string\">&#x27;vue&#x27;</span>, <span class=\"string\">&#x27;js&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">transformIgnorePatterns</span>: [<span class=\"string\">&#x27;/node_modules/(?!testing-library)&#x27;</span>]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>修改 package.json,添加测试命令</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;jest&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"简单的测试\">简单的测试<a title=\"#简单的测试\" href=\"#简单的测试\"></a></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;@testing-library/jest-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@testing-library/vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">HelloWorld</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./HelloWorld.vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;HelloWorld.vue&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;renders props.msg when passed&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> msg = <span class=\"string\">&#x27;new message&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; getByText &#125; = <span class=\"title function_\">render</span>(<span class=\"title class_\">HelloWorld</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">props</span>: &#123; msg &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(<span class=\"title function_\">getByText</span>(msg)).<span class=\"title function_\">toBeInTheDocument</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在需要测试的组件的同级目录下创建同名测试文件,例如上述针对 HelloWorld 的组件需要创建 HelloWorld.spec.js 文件</li>\n<li>在测试文件中引入 jest-dom 来扩充 jest 的断言方法</li>\n<li>上面的测试用例是用来测试组件是否正确地渲染,所以需要从 DOM 中获取渲染的内容,render 方法用来渲染组件,而 getByText<br>\n会试着去获取内容为 msg 的 DOM,并交给 jest 的 expect 方式,最后用 jest-dom 扩充的 toBeInTheDocument 去验证,看 getByText 有没有<br>\n找到 DOM,如果有的话就代表 HelloWorld 通过了测试</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;@testing-library/jest-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render, fireEvent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@testing-library/vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Counter</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Counter.vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;increments value on click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;click twice&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; getByText &#125; = <span class=\"title function_\">render</span>(<span class=\"title class_\">Counter</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">getByText</span>(<span class=\"string\">&#x27;Times clicked: 0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> button = <span class=\"title function_\">getByText</span>(<span class=\"string\">&#x27;increment&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> fireEvent.<span class=\"title function_\">click</span>(button);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> fireEvent.<span class=\"title function_\">click</span>(button);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(<span class=\"title function_\">getByText</span>(<span class=\"string\">&#x27;Times clicked: 2&#x27;</span>)).<span class=\"title function_\">toBeInTheDocument</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>有时,我们也想看一下带有交互事件的组件是否能正常工作,这个时候就需要用到 fireEvent 函数了.<br>\nfireEvent 用来模拟用户交互行为.在上面 Counter 测试中,用户点击两次后查看 DOM 中是否有含有<br>\n特定字符串的节点.</p>\n","prev":{"title":"Your Article Title","link":"2022/01/01/hello-world"},"next":{"title":"winget 使用","link":"2021/09/07/2021-09-07"},"plink":"https://pi-char.github.io/2021/11/25/2021-11-25/","toc":[{"id":"关于组件测试","title":"关于组件测试","index":"1"},{"id":"项目添加组件测试","title":"项目添加组件测试","index":"2"},{"id":"简单的测试","title":"简单的测试","index":"3"}],"reading_time":"763 字约 5 分钟"}