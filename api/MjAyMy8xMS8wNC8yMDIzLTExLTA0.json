{"title":"vscode中的eslint与项目中的eslint","date":"2023-11-03T16:00:00.000Z","date_formatted":{"ll":"2023年11月4日","L":"2023/11/04","MM-DD":"11-04"},"link":"2023/11/04/2023-11-04","tags":["VSCode"],"updated":"2024-01-24T01:26:39.000Z","content":"<p>这是上一篇文章的兄弟篇，用来介绍vscode中的prettier。</p>\n<p>和prettier不同，vscode并没有内置针对javascript的lint工具。但是对于强类型的typescript来说，<br>\nvscode就可以进行错误检查。对于弱类型的javascript来说，需要单独的配置lint工具。</p>\n<p>vscode的eslint插件主页是这么说的：</p>\n<blockquote>\n<p>这个扩展使用在打开的工作区的ESLint库。如果工作区没有提供任何版本的ESLint，那么插件会查找全局安装的版本。<br>\n如果你的本地和全局都没有安装ESLint，使用npm install eslint在本地安装或者npm install eslint -g在<br>\n全局安装。</p>\n</blockquote>\n<p>根据介绍，eslint扩展必须依赖eslint库才能运行。不像prettier扩展，安装后就能直接运行。</p>\n<p>在我们使用eslint库时，往往是作为命令行工具来使用。通过vscode集成，我们可以很方便的在<br>\n编辑器上实时的看到错误信息，这便是vscode扩展的作用。vscode通过eslint扩展，将eslint库<br>\n的输入显示在代码上，这样你便可以知道代码上的错误</p>\n","next":{"title":"C公司二面","link":"2023/11/03/2023-11-03"},"plink":"https://pi-char.github.io/2023/11/04/2023-11-04/","reading_time":"289 字约 2 分钟"}