{"title":"页面加载优化","date":"2022-08-31T16:00:00.000Z","date_formatted":{"ll":"2022年9月1日","L":"2022/09/01","MM-DD":"09-01"},"link":"2022/09/01/2022-09-01","tags":["Vue.js"],"updated":"2024-01-24T01:26:39.000Z","content":"<p>不同的 tab 页使用的还是同一个组件，但是在 tab 点击到列表完全展示，差不多有 1s~2s 等待时间。原因可能是组件加载缓慢或者网络请求慢</p>\n<h3 id=\"组件加载\">组件加载<a title=\"#组件加载\" href=\"#组件加载\"></a></h3>\n<p>使用 Vue devtool 可以检查组件的加载时间</p>\n<p><img src=\"/img/20220901101039.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>logContent 是列表组件容器，卡顿的表现也主要是由于该组件中的列表上时间没有渲染到页面，从而造成了视觉上的卡顿。从上图可以看出这个组件并没有耗费太长的时间。</p>\n<h3 id=\"接口请求\">接口请求<a title=\"#接口请求\" href=\"#接口请求\"></a></h3>\n<p>因为页面上有许多组件都可以和列表有交互,所以将数据的请求放在 Vuex 的 actions 中，可以更方便的在不同的组件中共享状态和操作。<br>\n整个列表加载是由三个接口构成</p>\n<p>以下接口均为最近 5 分钟的查询结果 从上到下依次是三个接口的加载时间<br>\n切换第一个 tab 时</p>\n<p><img src=\"/img/20220901111414.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"/img/20220901111509.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"/img/20220901111613.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>三次接口查询分别耗时 613ms 607ms 39ms<br>\n切换第二个 tab 时</p>\n<p><img src=\"/img/20220901111430.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"/img/20220901111547.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"/img/20220901111630.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>三个接口总共耗时 802ms 831ms 790ms</p>\n<p>访问上海的数据中心时平均耗时接近 1s，接近肉眼观察的页面加载时间</p>\n<h3 id=\"页面体验优化\">页面体验优化<a title=\"#页面体验优化\" href=\"#页面体验优化\"></a></h3>\n<p>加载动画在列表接口请求结束后就消失了，列表加载卡顿的原因也主要来自于 loading 动画结束之后到列表加载出来后的这一空白时间。loading 动画应该在第一个接口之前开始，在最后一个接口之后结束。<br>\n通过手动延长加载时间后，发现 loading 动画消失后到页面列表加载出来的这段时间，也是由 loading 组件占据了列表的位置，只是没有显示加载动画。</p>\n<p><img src=\"/img/20220901114922.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>loading 状态由 noData 和 isLoadding 两个变量控制，当列表请求结束后，便设置了 noData 变量，而 isLoadding 变量还是 true，从而导致了动画结束后的空白时间。<br>\n至此，问题也解决了，去掉组件的 show-img 属性，将 setListLoadding 提前，便可以使动画正常结束。</p>\n<h3 id=\"组件加载顺序\">组件加载顺序<a title=\"#组件加载顺序\" href=\"#组件加载顺序\"></a></h3>\n<p>在调试的过程中发现，初次进入原始日志页面的时候，表头的数据加载晚于列表的数据的加载。在 Vue 中，子组件的 created 生命周期先于父组件的 created 生命周期完成。获取日志的方法在子组件 searchbox 中调用，而获取表头的接口则在父组件中调用。因此，获取表头的方法永远晚于获取日志的接口，从而导致了表头的闪烁。这个问题可以通过将列表数据的请求放在父组件中来解决</p>\n","prev":{"title":"GH60键盘","link":"2022/10/06/2024-01-18"},"next":{"title":"NAS折腾（二）内网穿透","link":"2022/08/15/2022-08-15"},"plink":"https://pi-char.github.io/2022/09/01/2022-09-01/","toc":[{"id":"组件加载","title":"组件加载","index":"1"},{"id":"接口请求","title":"接口请求","index":"2"},{"id":"页面体验优化","title":"页面体验优化","index":"3"},{"id":"组件加载顺序","title":"组件加载顺序","index":"4"}],"reading_time":"719 字约 5 分钟"}