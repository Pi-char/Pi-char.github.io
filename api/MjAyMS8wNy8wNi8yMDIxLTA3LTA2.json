{"title":"使用 JSDoc 获得更好的类型提示","date":"2021-07-06T02:30:24.000Z","date_formatted":{"ll":"2021年7月6日","L":"2021/07/06","MM-DD":"07-06"},"link":"2021/07/06/2021-07-06","tags":["JavaScript","VSCode"],"updated":"2024-01-24T01:26:39.000Z","content":"<p>JSDoc 是适用于 JavaScript 的 API 文档生成工具,可以识别特定的标记语法编写的注释来生成可读性较好的文档</p>\n<p><img src=\"/img/1644201796767.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"vs-code-对-jsdoc-的支持\">VS Code 对 JSDoc 的支持<a title=\"#vs-code-对-jsdoc-的支持\" href=\"#vs-code-对-jsdoc-的支持\"></a></h2>\n<p>VS Code 能够理解大部分的 JSDoc 注释并且能够根据这些注释提供智能补全的功能。你甚至可以利用 JSDoc 提供的类型信息对你的 JS 进行类型检查<br>\n<img src=\"/img/1644201816782.png\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"jsdoc-使用\">JSDoc 使用<a title=\"#jsdoc-使用\" href=\"#jsdoc-使用\"></a></h2>\n<ol>\n<li>\n<p>@type<br>\n使用@type 标签来引用一个类型名(原始类型/TypeScript 中定义的类型/或者&quot;@typedef&quot;标签)</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@type</span> &#123;<span class=\"type\">string | number</span>&#125; 联合类型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">Window</span>&#125; dom提供的类型 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> win;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">Array&lt;number&gt;</span>&#125; 数组*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nums;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">&#123; a: string, b: number </span>&#125;&#125; 复杂类型 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> var9;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>@param @returns</p>\n<p>@param 使用和@type 相同的语法,但是需要添加参数名。将参数声明在中括号中可以使参数作为可选参数。使用@returns 来声明函数返回的类型</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数可以用多种语法来声明</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125;  <span class=\"variable\">p1</span> - 字符串参数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string=</span>&#125; <span class=\"variable\">p2</span> - 可选参数(Closure syntax)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; [p3] - 另一个可选参数 (JSDoc syntax).</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; [p4=&quot;test&quot;] - 有默认值的可选参数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125; 返回值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">stringsStringStrings</span>(<span class=\"params\">p1, p2, p3, p4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;string&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>@typedef @callback @param<br>\n@typedef 可以用来定义更复杂的类型。语法和@param 类似</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@typedef</span> &#123;<span class=\"type\">object</span>&#125; <span class=\"variable\">SpecialType1</span> - 创建新的类型并命名为 &#x27;SpecialType&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">prop1</span> - SpecialType的字符串属性</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">prop2</span> - SpecialType的数字属性</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@property</span> &#123;<span class=\"type\">number=</span>&#125; <span class=\"variable\">prop3</span> - SpecialType的可选数字属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">SpecialType1</span>&#125; */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> specialTypeObject1;</span><br></pre></td></tr></table></figure>\n<p>@param 可以使用类似的语法来定义一次性使用的类型。与@typedef 不同的是嵌套属性名必须以参数名作为前缀</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; <span class=\"variable\">options</span> - The shape is the same as SpecialType above</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; options.prop1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; options.prop2</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number=</span>&#125; options.prop3</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; [options.prop4]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; [options.prop5=42]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">special</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (options.<span class=\"property\">prop4</span> || <span class=\"number\">1001</span>) + options.<span class=\"property\">prop5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@callback 和@typedef 类似,但是它是定义函数类型而不是对象类型</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@callback</span> <span class=\"variable\">Predicate</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">data</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; [index]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">Predicate</span>&#125; */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">ok</span> = (<span class=\"params\">s</span>) =&gt; !(s.<span class=\"property\">length</span> % <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>当然,这些类型都可以在单行@typedef 中使用 TypeScript 语法来声明</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@typedef</span> &#123;<span class=\"type\">&#123; prop1: string, prop2: string, prop3?: number </span>&#125;&#125; SpecialType */</span></span><br><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@typedef</span> &#123;<span class=\"type\">(data: string, index?: number) =&gt; boolean</span>&#125; Predicate */</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>@ts-check</p>\n<p>说到底,JSDoc 只是更友好的类型提示工具，并不会对类型进行检查。VS Code 针对 TS 有类型检查,但是这对 JS 文件默认是不启用的。可以在 JS 文件第一行添加//@ts-check 开启类型错误提示<br>\n<img src=\"/img/1644201840858.png\" alt=\"\" loading=\"lazy\"></p>\n</li>\n</ol>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://jsdoc.app/\" target=\"_blank\">JSDoc 官网</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/languages/javascript#_jsdoc-support\" target=\"_blank\">VS Code 对 JSDoc 的支持</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html\" target=\"_blank\">TypeScript 官网的 JSDoc 支持文档</a></li>\n</ul>\n","prev":{"title":"winget 使用","link":"2021/09/07/2021-09-07"},"next":{"title":"基于Vue3+elementUI的中后台CRUD组件","link":"2021/04/03/2021-04-03"},"plink":"https://pi-char.github.io/2021/07/06/2021-07-06/","toc":[{"id":"vs-code-对-jsdoc-的支持","title":"VS Code 对 JSDoc 的支持","index":"1"},{"id":"jsdoc-使用","title":"JSDoc 使用","index":"2"},{"id":"参考","title":"参考","index":"3"}],"reading_time":"689 字约 5 分钟"}